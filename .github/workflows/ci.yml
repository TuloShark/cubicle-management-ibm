name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint --if-present
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd api
        npm ci
    
    - name: Run backend tests
      run: |
        cd api
        npm test --if-present
      env:
        MONGODB_URI: mongodb://admin:password@localhost:27017/space_optimization_test?authSource=admin
        NODE_ENV: test

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t space-optimization-frontend .
    
    - name: Build backend Docker image
      run: |
        cd api
        docker build -t space-optimization-api .
    
    - name: Test Docker Compose
      run: |
        # Create minimal .env files for testing
        echo "NODE_ENV=test" > api/.env
        echo "MONGODB_URI=mongodb://admin:password@mongodb:27017/space_optimization_test?authSource=admin" >> api/.env
        echo "JWT_SECRET=test-secret-key" >> api/.env
        echo "NOTIFICATIONS_ENABLED=false" >> api/.env
        
        echo "VITE_API_BASE_URL=http://localhost:3000" > frontend/.env
        echo "VITE_FIREBASE_API_KEY=test-key" >> frontend/.env
        echo "VITE_FIREBASE_AUTH_DOMAIN=test.firebaseapp.com" >> frontend/.env
        echo "VITE_FIREBASE_PROJECT_ID=test-project" >> frontend/.env
        
        # Test compose file syntax
        docker-compose config
